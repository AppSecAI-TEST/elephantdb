/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package elephantdb.generated;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class Status implements TBase<Status, Status._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Status");

  private static final TField DOMAIN_STATUSES_FIELD_DESC = new TField("domain_statuses", TType.MAP, (short)1);

  private Map<String,DomainStatus> domain_statuses;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    DOMAIN_STATUSES((short)1, "domain_statuses");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DOMAIN_STATUSES
          return DOMAIN_STATUSES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DOMAIN_STATUSES, new FieldMetaData("domain_statuses", TFieldRequirementType.REQUIRED, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new StructMetaData(TType.STRUCT, DomainStatus.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Status.class, metaDataMap);
  }

  public Status() {
  }

  public Status(
    Map<String,DomainStatus> domain_statuses)
  {
    this();
    this.domain_statuses = domain_statuses;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Status(Status other) {
    if (other.is_set_domain_statuses()) {
      Map<String,DomainStatus> __this__domain_statuses = new HashMap<String,DomainStatus>();
      for (Map.Entry<String, DomainStatus> other_element : other.domain_statuses.entrySet()) {

        String other_element_key = other_element.getKey();
        DomainStatus other_element_value = other_element.getValue();

        String __this__domain_statuses_copy_key = other_element_key;

        DomainStatus __this__domain_statuses_copy_value = new DomainStatus(other_element_value);

        __this__domain_statuses.put(__this__domain_statuses_copy_key, __this__domain_statuses_copy_value);
      }
      this.domain_statuses = __this__domain_statuses;
    }
  }

  public Status deepCopy() {
    return new Status(this);
  }

  @Override
  public void clear() {
    this.domain_statuses = null;
  }

  public int get_domain_statuses_size() {
    return (this.domain_statuses == null) ? 0 : this.domain_statuses.size();
  }

  public void put_to_domain_statuses(String key, DomainStatus val) {
    if (this.domain_statuses == null) {
      this.domain_statuses = new HashMap<String,DomainStatus>();
    }
    this.domain_statuses.put(key, val);
  }

  public Map<String,DomainStatus> get_domain_statuses() {
    return this.domain_statuses;
  }

  public void set_domain_statuses(Map<String,DomainStatus> domain_statuses) {
    this.domain_statuses = domain_statuses;
  }

  public void unset_domain_statuses() {
    this.domain_statuses = null;
  }

  /** Returns true if field domain_statuses is set (has been asigned a value) and false otherwise */
  public boolean is_set_domain_statuses() {
    return this.domain_statuses != null;
  }

  public void set_domain_statuses_isSet(boolean value) {
    if (!value) {
      this.domain_statuses = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DOMAIN_STATUSES:
      if (value == null) {
        unset_domain_statuses();
      } else {
        set_domain_statuses((Map<String,DomainStatus>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DOMAIN_STATUSES:
      return get_domain_statuses();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DOMAIN_STATUSES:
      return is_set_domain_statuses();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Status)
      return this.equals((Status)that);
    return false;
  }

  public boolean equals(Status that) {
    if (that == null)
      return false;

    boolean this_present_domain_statuses = true && this.is_set_domain_statuses();
    boolean that_present_domain_statuses = true && that.is_set_domain_statuses();
    if (this_present_domain_statuses || that_present_domain_statuses) {
      if (!(this_present_domain_statuses && that_present_domain_statuses))
        return false;
      if (!this.domain_statuses.equals(that.domain_statuses))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_domain_statuses = true && (is_set_domain_statuses());
    builder.append(present_domain_statuses);
    if (present_domain_statuses)
      builder.append(domain_statuses);

    return builder.toHashCode();
  }

  public int compareTo(Status other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Status typedOther = (Status)other;

    lastComparison = Boolean.valueOf(is_set_domain_statuses()).compareTo(typedOther.is_set_domain_statuses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_domain_statuses()) {
      lastComparison = TBaseHelper.compareTo(this.domain_statuses, typedOther.domain_statuses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // DOMAIN_STATUSES
          if (field.type == TType.MAP) {
            {
              TMap _map0 = iprot.readMapBegin();
              this.domain_statuses = new HashMap<String,DomainStatus>(2*_map0.size);
              for (int _i1 = 0; _i1 < _map0.size; ++_i1)
              {
                String _key2;
                DomainStatus _val3;
                _key2 = iprot.readString();
                _val3 = new DomainStatus();
                _val3.read(iprot);
                this.domain_statuses.put(_key2, _val3);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.domain_statuses != null) {
      oprot.writeFieldBegin(DOMAIN_STATUSES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.domain_statuses.size()));
        for (Map.Entry<String, DomainStatus> _iter4 : this.domain_statuses.entrySet())
        {
          oprot.writeString(_iter4.getKey());
          _iter4.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Status(");
    boolean first = true;

    sb.append("domain_statuses:");
    if (this.domain_statuses == null) {
      sb.append("null");
    } else {
      sb.append(this.domain_statuses);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (!is_set_domain_statuses()) {
      throw new TProtocolException("Required field 'domain_statuses' is unset! Struct:" + toString());
    }

  }

}

