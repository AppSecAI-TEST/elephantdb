/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package elephantdb.generated;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class DomainStatus extends TUnion<DomainStatus, DomainStatus._Fields> {
  private static final TStruct STRUCT_DESC = new TStruct("DomainStatus");
  private static final TField READY_FIELD_DESC = new TField("ready", TType.STRUCT, (short)1);
  private static final TField LOADING_FIELD_DESC = new TField("loading", TType.STRUCT, (short)2);
  private static final TField FAILED_FIELD_DESC = new TField("failed", TType.STRUCT, (short)3);
  private static final TField SHUTDOWN_FIELD_DESC = new TField("shutdown", TType.STRUCT, (short)4);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    READY((short)1, "ready"),
    LOADING((short)2, "loading"),
    FAILED((short)3, "failed"),
    SHUTDOWN((short)4, "shutdown");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // READY
          return READY;
        case 2: // LOADING
          return LOADING;
        case 3: // FAILED
          return FAILED;
        case 4: // SHUTDOWN
          return SHUTDOWN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.READY, new FieldMetaData("ready", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, ReadyStatus.class)));
    tmpMap.put(_Fields.LOADING, new FieldMetaData("loading", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, LoadingStatus.class)));
    tmpMap.put(_Fields.FAILED, new FieldMetaData("failed", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, FailedStatus.class)));
    tmpMap.put(_Fields.SHUTDOWN, new FieldMetaData("shutdown", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, ShutdownStatus.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(DomainStatus.class, metaDataMap);
  }

  public DomainStatus() {
    super();
  }

  public DomainStatus(_Fields setField, Object value) {
    super(setField, value);
  }

  public DomainStatus(DomainStatus other) {
    super(other);
  }
  public DomainStatus deepCopy() {
    return new DomainStatus(this);
  }

  public static DomainStatus ready(ReadyStatus value) {
    DomainStatus x = new DomainStatus();
    x.set_ready(value);
    return x;
  }

  public static DomainStatus loading(LoadingStatus value) {
    DomainStatus x = new DomainStatus();
    x.set_loading(value);
    return x;
  }

  public static DomainStatus failed(FailedStatus value) {
    DomainStatus x = new DomainStatus();
    x.set_failed(value);
    return x;
  }

  public static DomainStatus shutdown(ShutdownStatus value) {
    DomainStatus x = new DomainStatus();
    x.set_shutdown(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case READY:
        if (value instanceof ReadyStatus) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ReadyStatus for field 'ready', but got " + value.getClass().getSimpleName());
      case LOADING:
        if (value instanceof LoadingStatus) {
          break;
        }
        throw new ClassCastException("Was expecting value of type LoadingStatus for field 'loading', but got " + value.getClass().getSimpleName());
      case FAILED:
        if (value instanceof FailedStatus) {
          break;
        }
        throw new ClassCastException("Was expecting value of type FailedStatus for field 'failed', but got " + value.getClass().getSimpleName());
      case SHUTDOWN:
        if (value instanceof ShutdownStatus) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ShutdownStatus for field 'shutdown', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object readValue(TProtocol iprot, TField field) throws TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case READY:
          if (field.type == READY_FIELD_DESC.type) {
            ReadyStatus ready;
            ready = new ReadyStatus();
            ready.read(iprot);
            return ready;
          } else {
            TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LOADING:
          if (field.type == LOADING_FIELD_DESC.type) {
            LoadingStatus loading;
            loading = new LoadingStatus();
            loading.read(iprot);
            return loading;
          } else {
            TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case FAILED:
          if (field.type == FAILED_FIELD_DESC.type) {
            FailedStatus failed;
            failed = new FailedStatus();
            failed.read(iprot);
            return failed;
          } else {
            TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SHUTDOWN:
          if (field.type == SHUTDOWN_FIELD_DESC.type) {
            ShutdownStatus shutdown;
            shutdown = new ShutdownStatus();
            shutdown.read(iprot);
            return shutdown;
          } else {
            TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void writeValue(TProtocol oprot) throws TException {
    switch (setField_) {
      case READY:
        ReadyStatus ready = (ReadyStatus)value_;
        ready.write(oprot);
        return;
      case LOADING:
        LoadingStatus loading = (LoadingStatus)value_;
        loading.write(oprot);
        return;
      case FAILED:
        FailedStatus failed = (FailedStatus)value_;
        failed.write(oprot);
        return;
      case SHUTDOWN:
        ShutdownStatus shutdown = (ShutdownStatus)value_;
        shutdown.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case READY:
        return READY_FIELD_DESC;
      case LOADING:
        return LOADING_FIELD_DESC;
      case FAILED:
        return FAILED_FIELD_DESC;
      case SHUTDOWN:
        return SHUTDOWN_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public ReadyStatus get_ready() {
    if (getSetField() == _Fields.READY) {
      return (ReadyStatus)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'ready' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void set_ready(ReadyStatus value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.READY;
    value_ = value;
  }

  public LoadingStatus get_loading() {
    if (getSetField() == _Fields.LOADING) {
      return (LoadingStatus)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'loading' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void set_loading(LoadingStatus value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.LOADING;
    value_ = value;
  }

  public FailedStatus get_failed() {
    if (getSetField() == _Fields.FAILED) {
      return (FailedStatus)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'failed' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void set_failed(FailedStatus value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.FAILED;
    value_ = value;
  }

  public ShutdownStatus get_shutdown() {
    if (getSetField() == _Fields.SHUTDOWN) {
      return (ShutdownStatus)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'shutdown' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void set_shutdown(ShutdownStatus value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SHUTDOWN;
    value_ = value;
  }

  public boolean equals(Object other) {
    if (other instanceof DomainStatus) {
      return equals((DomainStatus)other);
    } else {
      return false;
    }
  }

  public boolean equals(DomainStatus other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(DomainStatus other) {
    int lastComparison = TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    HashCodeBuilder hcb = new HashCodeBuilder();
    hcb.append(this.getClass().getName());
    TFieldIdEnum setField = getSetField();
    if (setField != null) {
      hcb.append(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof TEnum) {
        hcb.append(((TEnum)getFieldValue()).getValue());
      } else {
        hcb.append(value);
      }
    }
    return hcb.toHashCode();
  }
}
